import math

import "utils" as utils

class Tilemap
{
    new(map)
    {
        for const k, v in map
        {
            setattr(self, k, v)
        }
        self.init()
    }

    function init()
    {
        self.tiles = {}
        self.objects = {}

        // Set tiles, images
        var gid = 1
        for var i = 0; i < self.tilesets.len; i++
        {
            const tileset = self.tilesets[i]
            const path = tileset['image']
            tileset['image'] = micro.Image.fromFile(path)
            gid = self.setTiles(i, tileset, gid)
        }

        const layers = []
        for const layer in self.layers
        {
            layers.add(layer)
        }
        self.layers = layers

        // Set layers
        for var i = 0; i < self.layers.len; i++
        {
            const layer = self.layers[i]
            self.setLayer(i, layer)
        }
    }

    function setTiles(idx, tileset, gid)
    {
        const imageW = tileset['imagewidth']
        const imageH = tileset['imageheight']
        const tileW = tileset['tilewidth']
        const tileH = tileset['tileheight']
        const w = utils.getTiles(imageW, tileW)
        const h = utils.getTiles(imageH, tileH)

        for var y = 0; y < h; y++
        {
            for var x = 0; x < w; x++
            {
                const id = gid - tileset['firstgid']
                const quadX = x * tileW
                const quadY = y * tileH
                var type = ''
                var properties, animation

                for const tile in tileset['tiles']
                {
                    if tile['id'] == id
                    {
                        properties = tile['properties']
                        animation = tile.get("animation")
                        type = tile.get("type")
                    }
                }

                const tile = {
                    id = id,
                    gid = gid,
                    tileset = idx,
                    type = type,
                    quad = {
                        x = quadX, y = quadY,
                        w = tileW, h = tileH
                    },
                    properties = properties or {},
                    animation = animation,
                    frame = 1,
                    time = 0,
                    width = tileW,
                    height = tileH,
                    sx = 1,
                    sy = 1,
                    r = 0,
                }

                self.tiles[gid] = tile
                gid++
            }
        }
        return gid
    }

    function setLayer(idx, layer)
    {
        layer['x'] = layer.get("x", 0)
        layer['y'] = layer.get("y", 0)

        if layer['type'] == "tilelayer"
        {
            self.setTileData(layer)
            self.setSpriteQuads(layer)
            layer['draw'] = function(x=0, y=0) { self.drawTileLayer(layer, x, y) }
        }
        else if layer['type'] == "objectgroup"
        {
            self.setObjectData(layer)
            layer['draw'] = function(x=0, y=0) { }
        }

        self.layers[idx] = layer
    }

    function setTileData(layer)
    {
        var i = 0
        const map = {}

        for var y = 0; y < layer['height']; y++
        {
            map[y] = {}
            for var x = 0; x < layer['width']; x++
            {
                const gid = layer['data'][i]
                
                // NOTE: Empty tiles have a GID of 0
                if gid > 0
                {
                    map[y][x] = self.tiles.get(gid) or self.setFlippedGID(gid)
                }

                i++
            }
        }

        layer['data'] = map
    }

    // Create flipped or rotated tiles based on bitop flags
    function setFlippedGID(gid)
    {
        var bit31 = 2147483648
        var bit30 = 1073741824
        var bit29 = 536870912
        var flipX = false
        var flipY = false
        var flipD = false
        var realgid = gid

        if realgid >= bit31
        {
            realgid = realgid - bit31
            flipX = not flipX
        }

        if realgid >= bit30
        {
            realgid = realgid - bit30
            flipY = not flipY
        }

        if realgid >= bit29
        {
            realgid = realgid - bit29
            flipD   = not flipD
        }

        const tile = self.tiles[realgid]
        const data = {
            id         = tile['id'],
            gid        = gid,
            tileset    = tile['tileset'],
            frame      = tile['frame'],
            time       = tile['time'],
            width      = tile['width'],
            height     = tile['height'],
            offset     = tile.get("offset"),
            quad       = tile['quad'],
            properties = tile['properties'],
            animation  = tile['animation'],
            sx         = tile['sx'],
            sy         = tile['sy'],
            r          = tile['r'],
        }

        if flipX
        {
            if flipY and flipD
            {
                data['r']  = math.rad(-90)
                data['sy'] = -1
            }
            else if flipY
            {
                data['sx'] = -1
                data['sy'] = -1
            }
            else if flipD
            {
                data['r'] = math.rad(90)
            }
            else
            {
                data['sx'] = -1
            }
        }
        else if flipY
        {
            if flipD
            {
                data['r'] = math.rad(-90)
            }
            else
            {
                data['sy'] = -1
            }
        }
        else if flipD
        {
            data['r']  = math.rad(90)
            data['sy'] = -1
        }

        self.tiles[gid] = data

        return self.tiles[gid]
    }

    function setObjectData(layer)
    {
        layer['quads'] = []
        for const object in layer['objects']
        {
            object['layer'] = layer
            self.objects[object['id']] = object
        }
    }

    function getLayerTilePosition(layer, tile, x, y)
    {
        const tileW = self.tilewidth
        const tileH = self.tileheight
        var tileX, tileY

        const tileset = self.tilesets[tile['tileset']]
        tileX = x * tileW
        tileY = (y + 1) * tileH - tileset['tileheight']

        return [tileX, tileY]
    }

    function addNewLayerTile(layer, tile, x, y)
    {
        const tileX, tileY = self.getLayerTilePosition(layer, tile, x, y)
        const quad = utils.deepcopy(tile)
        quad['x'] = tileX
        quad['y'] = tileY
        layer['quads'].add(quad)
    }

    function setQuads(layer)
    {
        layer['quads'] = []

        const startX = 0
        const startY = 0
        const endX = layer['width']
        const endY = layer['height']

        for var y = startY; y < endY; y++
        {
            for var x = startX; x < endX; x++
            {
                // NOTE: Cannot short circuit self since it is valid for tile to be assigned nil
                if layer['data'].get(y) and layer['data'][y].get(x)
                {
                    const tile = layer['data'][y][x]
                    self.addNewLayerTile(layer, tile, x, y)
                }    
            }
        }
    }

    function setSpriteQuads(layer)
    {
        self.setQuads(layer)
    }

    function update(dt)
    {
        for const _, layer in self.layers
        {
            for const _, tile in layer.quads
            {
                if tile['animation']
                {
                    tile['time'] = tile['time'] + dt * 1000
                    const duration = tile['animation'][tile['frame']].duration

                    while tile['time'] >= duration
                    {
                        tile['time'] = tile['time'] - duration
                        tile['frame'] = tile['frame'] + 1

                        if tile['frame'] > tile['animation'].len
                        {
                            tile['frame'] = 1 // Loop the animation
                        }
                    }
                }
            }
        }
    }

    function draw(x=0, y=0)
    {
        const rbg = self.backgroundcolor
        micro.gfx.clear(rbg[0], rbg[1], rbg[2])

        for const layer in self.layers
        {
            if layer['visible'] and layer['opacity'] > 0
            {
                layer["draw"](x, y)
            }
        }
    }

    function drawTileLayer(layer, x=0, y=0)
    {
        if typeof(layer) == "string" or typeof(layer) == "number"
        {
            layer = self.layers[layer]
        }

        assert(layer['type'] == "tilelayer", "Invalid layer type: " + layer['type'] + ". Layer must be of type: tilelayer")

        for const tile in layer['quads']
        {
            if tile['animation']
            {
                var currentFrame = tile['animation'][tile['frame']].tileid + 1
                tile['quad'] = self.tiles[currentFrame]['quad']
            }

            var drawX = math.floor(tile['x'] - x)
            var drawY = math.floor(tile['y'] - y)

            if tile['sx'] == -1
            {
                drawX += tile['width']
            }

            micro.gfx.draw(
                self.tilesets[tile['tileset']]['image'],
                drawX,
                drawY,
                tile['quad'],
                tile['r'],
                tile['sx'],
                tile['sy']
            )
        }
    }
}

export function load(map)
{
    return Tilemap.new(map)
}

import "plugins/bump" as plugin
export {
    plugin
}