var font
var inited = false
var enabled = false
var focused = false
const indicators = []
var inputbuf = ""

var indicatorIdx = -1
var textRegionWidth = 20

import math

function newIndicator(fn, min=0, max=0)
{
    // Get idx
    indicatorIdx++
    // Init
    const pad = 8
    const height = 13
    const yoffset = pad + height * indicatorIdx
    // Return draw function
    return function()
    {
        const txt, val = fn()
        // Draw text
        micro.gfx.setFont(font)
        micro.gfx.print(txt, pad, yoffset)
        micro.gfx.setFont()
    }
}

var offx = 0, offy = 0

export function setOffset(x, y)
{
    offx = x
    offy = y
}

import "helper" as helper

function prompt(text)
{
    text = text.strip()

    if text[0] != "/" 
    {
        return error("Invalid command. Commands must start with '/'.")
    }

    const parts = text.split(" ")
    const command = parts[0][1:]    // Remove leading '/'

    if command == "spawn" 
    {
        const x = tonumber(parts[1])
        const y = tonumber(parts[2])
        const type = parts[3]
        const variant = parts.len > 4 ? parts[4] : 'none'
        const name = helper.getName(type, variant)

        if x == nil or y == nil 
        {
            return error("x and y must be numbers")
        }

        import "level" as level
        level.spawnEntity(x + offx, y + offy, type, name)

        print("Spawned entity: ${name} (${type}) at (${x}, ${y})")
    } 
    else 
    {
        error("Unknown command: ${command}")
    }
}

export function _event(event, data)
{
    if event == "keydown" and enabled and focused
    {
        if data == "backspace"
        {
            inputbuf = inputbuf[0:-1]
        }
        else if data == "enter"
        {
            prompt(inputbuf)
            inputbuf = ""
        }
    }
    else if event == "textinput" and enabled and focused
    {
        inputbuf += data
    }
}

export function draw()
{
    if not enabled { return }

    for const v in indicators
    {
        v()
    }

    // Draw console input text
    var w = 300
    if focused
    {
        var h = font.getHeight()
        var y = micro.gfx.screen.getHeight() - 8 - h
        var caret = (micro.timer.getTime() % 0.6 < 0.3) and "_" or ""
        w = math.max(w, font.getWidth(inputbuf + "_"))
        micro.gfx.print(inputbuf + caret, 8, y)
    }
}

function init()
{
    font = micro.Font.fromEmbedded(8)
    addIndicator(function() {
        const r = micro.timer.getFps()
        return ["${r} fps", r]
    })
    addIndicator(function() {
        const r = gc()
        return ["%.2f mb".format(r / 1024), r]
    })
    inited = true
}

export function setVisible(x)
{
    enabled = x and true or false
    if enabled and not inited
    {
        init()
    }
}

export function getVisible()
{
    return enabled
}

export function setFocused(x)
{
    focused = x and true or false
}

export function getFocused()
{
    return focused
}

function addIndicator(fn, min=0, max=0)
{
    const str, num = fn()
    if typeof(str) != "string" or typeof(num) != "number"
    {
        error("expected indicator function to return string and number")
    }
    if min and typeof(min) != "number"
    {
        error("expected `min` to be a number")
    }
    if max and typeof(max) != "number"
    {
        error("expected `max` to be a number")
    }
    const indicator = newIndicator(fn, min, max)
    indicators.add(indicator)
    return indicator
}

function removeIndicator(indicator)
{
    const idx = indicators.index(indicator)
    if idx != -1
    {
        indicators.delete(i)
    }
}