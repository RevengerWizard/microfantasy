// Auxiliary functions

from math import abs, floor, ceil, min, max, sign, infinity

const DELTA = 1e-10 // floating-point margin error

function nearest(x, a, b)
{
    if abs(a - x) < abs(b - x) { return a }
    else { return b }
}

function assertType(desiredType, value, name)
{
    if typeof(value) != desiredType
    {
        error(name + ' must be a ' + desiredType + ', but was ' + tostring(value) + '(a ' + typeof(value) + ')')
    }
}

function assertIsPositiveNumber(value, name)
{
    if typeof(value) != 'number' or value <= 0
    {
        error(name + ' must be a positive integer, but was ' + tostring(value) + '(' + typeof(value) + ')')
    }
}

function assertIsRect(x, y, w, h)
{
    assertType('number', x, 'x')
    assertType('number', y, 'y')
    assertIsPositiveNumber(w, 'w')
    assertIsPositiveNumber(h, 'h')
}

const defaultFilter = function(a, b) {
    return 'slide'
}

// Rectangle functions

function rect_getNearestCorner(x, y, w, h, px, py)
{
    return [nearest(px, x, x + w), nearest(py, y, y + h)]
}

/*
 *  This is a generalized implementation of the liang-barsky algorithm, which also returns
 *  the normals of the sides where the segment intersects.
 *  Returns nil if the segment never touches the rect
 *  Notice that normals are only guaranteed to be accurate when initially 
 *  ti1, ti2 == -math.infinity, math.infinity
*/
function rect_getSegmentIntersectionIndices(x, y, w, h, x1, y1, x2, y2, ti1=0, ti2=1)
{
    var dx, dy = x2 - x1, y2 - y1
    var nx, ny
    var nx1, ny1, nx2, ny2 = 0, 0, 0, 0
    var p, q, r

    for var side = 1; side < 5; side += 1
    {
        if side == 1 { nx, ny, p, q = -1,  0, -dx, x1 - x }     // left
        else if side == 2 { nx, ny, p, q = 1,  0,  dx, x + w - x1 } // right
        else if side == 3 { nx, ny, p, q = 0, -1, -dy, y1 - y }     // top
        else               { nx, ny, p, q = 0, 1, dy, y + h - y1 } // bottom

        if p == 0
        {
            if q <= 0 { return nil }
        }
        else
        {
            r = q / p
            if p < 0
            {
                if r > ti2 { return nil }
                else if r > ti1 { ti1, nx1, ny1 = r, nx, ny }
            }
            else // p > 0
            {
                if r < ti1 { return nil }
                else if r < ti2 { ti2, nx2, ny2 = r, nx, ny }
            }
        }
    }

    return [ti1, ti2, nx1, ny1, nx2, ny2]
}

// Calculates the minkowsky difference between 2 rects, which is another rect
function rect_getDiff(x1, y1, w1, h1, x2, y2, w2, h2)
{
    return [x2 - x1 - w1,
            y2 - y1 - h1,
            w1 + w2,
            h1 + h2]
}

function rect_containsPoint(x, y, w, h, px, py)
{
    return px - x > DELTA and py - y > DELTA and
            x + w - px > DELTA and y + h - py > DELTA
}

function rect_isIntersecting(x1, y1, w1, h1, x2, y2, w2, h2)
{
    return x1 < x2 + w2 and x2 < x1 + w1 and
           y1 < y2 + h2 and y2 < y1 + h1
}

function rect_getSquareDistance(x1, y1, w1, h1, x2, y2, w2, h2)
{
    const dx = x1 - x2 + (w1 - w2) / 2
    const dy = y1 - y2 + (h1 - h2) / 2
    return dx * dx + dy * dy
}

function rect_detectCollision(x1, y1, w1, h1, x2, y2, w2, h2, goalX=nil, goalY=nil)
{
    goalX = goalX or x1
    goalY = goalY or y1

    const dx, dy = goalX - x1, goalY - y1
    var x, y, w, h = rect_getDiff(x1, y1, w1, h1, x2, y2, w2, h2)

    var overlaps, ti, nx, ny

    if rect_containsPoint(x, y, w, h, 0, 0) // item was intersecting other
    {
        var px, py = rect_getNearestCorner(x, y, w, h, 0, 0)
        var wi, hi = min(w1, abs(px)), min(h1, abs(py)) // area of intersection
        ti = -wi * hi // ti is the negative area of intersection
        overlaps = true
    }
    else
    {
        const intersection = rect_getSegmentIntersectionIndices(x, y, w, h, 0, 0, dx, dy, -infinity, infinity)

        if intersection
        {
            var ti1, ti2, nx1, ny1, _, __ = intersection
            // item tunnels into other
            if ti1 < 1
                and (abs(ti1 - ti2) >= DELTA) // special case for rect going through another rect's corner
                and (0 < ti1 + DELTA
                    or (0 == ti1 and ti2 > 0))
            {
                ti, nx, ny = ti1, nx1, ny1
                overlaps = false
            }
        }
    }

    if typeof(ti) != 'number' { return nil }

    var tx, ty

    if overlaps
    {
        if dx == 0 and dy == 0
        {
            // intersecting and not moving - use minimum displacement vector
            var px, py = rect_getNearestCorner(x, y, w, h, 0, 0)
            if abs(px) < abs(py)
            {
                py = 0
            }
            else
            {
                px = 0
            }
            nx, ny = sign(px), sign(py)
            tx, ty = x1 + px, y1 + py
        }
        else
        {
            // intersecting and moving - move in the opposite direction
            const intersection = rect_getSegmentIntersectionIndices(x, y, w, h, 0, 0, dx, dy, -infinity, 1)

            if intersection
            {
                var ti1, _
                ti1, _, nx, ny, _, _ = intersection
                tx, ty = x1 + dx * ti1, y1 + dy * ti1
            }
        }
    }
    else // tunnel
    {
        tx, ty = x1 + dx * ti, y1 + dy * ti
    }

    return {
        overlaps  = overlaps,
        ti        = ti,
        move      = {x = dx, y = dy},
        normal    = {x = nx, y = ny},
        touch     = {x = tx, y = ty},
        itemRect  = {x = x1, y = y1, w = w1, h = h1},
        otherRect = {x = x2, y = y2, w = w2, h = h2}
    }
}

// Grid functions

function grid_toWorld(cellSize, cx, cy)
{
    return [(cx - 1) * cellSize, (cy - 1) * cellSize]
}

function grid_toCell(cellSize, x, y)
{
    return [floor(x / cellSize) + 1, floor(y / cellSize) + 1]
}

/*
 * grid_traverse* functions are based on "A Fast Voxel Traversal Algorithm for Ray Tracing",
 * by John Amanides and Andrew Woo - http://www.cse.yorku.ca/~amana/research/grid.pdf
 * It has been modified to include both cells when the ray "touches a grid corner",
 * and with a different exit condition
*/
function grid_traverse_initStep(cellSize, ct, t1, t2)
{
    const v = t2 - t1
    if v > 0
    {
        return [1,  cellSize / v, ((ct + v) * cellSize - t1) / v]
    }
    else if v < 0
    {
        return [-1, -cellSize / v, ((ct + v - 1) * cellSize - t1) / v]
    }
    else
    {
        return [0, infinity, infinity]
    }
}

function grid_traverse(cellSize, x1, y1, x2, y2, f)
{
    var cx1, cy1 = grid_toCell(cellSize, x1, y1)
    var cx2, cy2 = grid_toCell(cellSize, x2, y2)
    var stepX, dx, tx = grid_traverse_initStep(cellSize, cx1, x1, x2)
    var stepY, dy, ty = grid_traverse_initStep(cellSize, cy1, y1, y2)
    var cx, cy = cx1, cy1

    f(cx, cy)

    /*
     * The default implementation had an infinite loop problem when
     * approaching the last cell in some occassions. We finish iterating
     * when we are *next* to the last cell
     */
    while abs(cx - cx2) + abs(cy - cy2) > 1
    {
        if tx < ty
        {
            tx, cx = tx + dx, cx + stepX
            f(cx, cy)
        }
        else
        {
            // Addition: include both cells when going through corners
            if tx == ty { f(cx + stepX, cy) }
            ty, cy = ty + dy, cy + stepY
            f(cx, cy)
        }
    }

    // If we have not arrived to the last cell, use it
    if cx != cx2 or cy != cy2 { f(cx2, cy2) }
}

function grid_toCellRect(cellSize, x, y, w, h)
{
    var cx, cy = grid_toCell(cellSize, x, y)
    var cr, cb = ceil((x + w) / cellSize), ceil((y + h) / cellSize)
    return [cx, cy, cr - cx + 1, cb - cy + 1]
}

// Responses

const touch = function(world, col, x, y, w, h, goalX=nil, goalY=nil, filter=nil)
{
    return [col['touch']['x'], col['touch']['y'], []]
}

const cross = function(world, col, x, y, w, h, goalX=nil, goalY=nil, filter=nil)
{
    const cols = world.project(col['item'], x, y, w, h, goalX, goalY, filter)
    return [goalX, goalY, cols]
}

const slide = function(world, col, x, y, w, h, goalX=nil, goalY=nil, filter=nil)
{
    goalX = goalX or x
    goalY = goalY or y

    var tch, move = col['touch'], col['move']
    if move['x'] != 0 or move['y'] != 0
    {
        if col['normal']['x'] != 0
        {
            goalX = tch['x']
        }
        else
        {
            goalY = tch['y']
        }
    }

    col['slide'] = {x = goalX, y = goalY}

    x, y = tch['x'], tch['y']
    const cols = world.project(col['item'], x, y, w, h, goalX, goalY, filter)
    return [goalX, goalY, cols]
}

const bounce = function(world, col, x, y, w, h, goalX=nil, goalY=nil, filter=nil)
{
    goalX = goalX or x
    goalY = goalY or y
  
    var tch, move = col['touch'], col['move']
    var tx, ty = tch['x'], tch['y']
  
    var bx, by = tx, ty
  
    if move.x != 0 or move.y != 0
    {
        var bnx, bny = goalX - tx, goalY - ty
        if col['normal']['x'] == 0
        {
            bny = -bny
        }
        else
        {
            bnx = -bnx
        }
        bx, by = tx + bnx, ty + bny
    }
  
    col['bounce'] = {x = bx, y = by}
    x, y = tch['x'], tch['y']
    goalX, goalY = bx, by
  
    const cols = world.project(col['item'], x, y, w, h, goalX, goalY, filter)
    return [goalX, goalY, cols]
}

function sortByWeight(a,b) { return a['weight'] < b['weight'] }

function sortByTiAndDistance(a, b)
{
    if a['ti'] == b['ti']
    {
        const ir, ar, br = a['itemRect'], a['otherRect'], b['otherRect']
        const ad = rect_getSquareDistance(ir['x'], ir['y'], ir['w'], ir['h'], ar['x'], ar['y'], ar['w'], ar['h'])
        const bd = rect_getSquareDistance(ir['x'], ir['y'], ir['w'], ir['h'], br['x'], br['y'], br['w'], br['h'])
        return ad < bd
    }
    return a['ti'] < b['ti']
}

function addItemToCell(world, item, cx, cy)
{
    world.rows[cy] = world.rows.get(cy) or {}
    const row = world.rows[cy]
    row[cx] = row.get(cx) or {x = cx, y = cy, items = {}}
    var cell = row[cx]
    world.nonEmptyCells[cell] = true
    if item not in cell['items']
    {
        cell['items'][item] = true
    }
}

function removeItemFromCell(world, item, cx, cy)
{
    var row = world.rows[cy]
    if not row or not row[cx] or not row[cx]['items'][item] { return false }
  
    var cell = row[cx]
    cell['items'].delete(item)
    if cell.count == 0
    {
        world.nonEmptyCells.delete(cell)
    }
    return true
}

function getItemsInCellRect(world, cl, ct, cw, ch)
{
    var items_dict = {}
    for var cy = ct; cy < ct + ch; cy += 1
    {
        var row = world.rows.get(cy)
        if row
        {
            for var cx = cl; cx < cl + cw; cx += 1
            {
                var cell = row.get(cx)
                if cell and cell.count > 0 // no cell.count > 1 because tunneling
                {
                    for const item, _ in cell['items']
                    {
                        items_dict[item] = true
                    }
                }
            }
        }
    }

    return items_dict
}

function getCellsTouchedBySegment(world, x1, y1, x2, y2)
{
    const cells, visited = [], {}
 
    grid_traverse(world.cellSize, x1, y1, x2, y2, function(cx, cy) {
        var row = world.rows.get(cy)
        if not row { return }
        var cell = row.get(cx)
        if not cell or visited.get(cell) { return }
        
        visited[cell] = true
        cells.add(cell)
    })
    
    return cells
}

function getInfoAboutItemsTouchedBySegment(world, x1,y1, x2,y2, filter=nil)
{
    var cells = getCellsTouchedBySegment(world, x1, y1, x2, y2)
    var rect, l, t, w, h, ti1, ti2, tii0, tii1
    var visited = {}, itemInfo = []
  
    for const cell in cells
    {
        for const item, _ in cell['items']
        {
            if not visited.get(item)
            {
                visited[item] = true
                if not filter or filter(item, nil)
                {
                    rect = world.rects[item]
                    l = rect['x']
                    t = rect['y']
                    w = rect['w']
                    h = rect['h']

                    var intersections = rect_getSegmentIntersectionIndices(l, t, w, h, x1, y1, x2, y2, 0, 1)

                    if intersections
                    {
                        var ti1, ti2, _
                        ti1, ti2, _, _, _, _ = intersections
                        if (0 < ti1 and ti1 < 1) or (0 < ti2 and ti2 < 1)
                        {
                            // the sorting is according to the t of an infinite line, not the segment
                            var tii0, tii1
                            tii0, tii1, _, _, _, _ = rect_getSegmentIntersectionIndices(l, t, w, h, x1, y1, x2, y2, -infinity, infinity)
                            itemInfo.add({ item = item, ti1 = ti1, ti2 = ti2, weight = min(tii0, tii1) })
                        }
                    }
                }
            }
        }
    }
  
    itemInfo.sort(sortByWeight)
    return itemInfo
}

function getResponseByName(world, name)
{
    const response = world.responses.get(name)
    if not response
    {
        error('Unknown collision type: %s (%s)'.format(name, typeof(name)))
    }
    return response
}

// World

class World
{
    new(cellSize)
    { 
        self.cellSize = cellSize
        self.rects = {}
        self.rows = {}
        self.nonEmptyCells = {}
        self.responses = {}
    }

    // Misc public methods

    function addResponse(name, response)
    {
        self.responses[name] = response
    }

    function project(item, x, y, w, h, goalX=nil, goalY=nil, filter=nil)
    {
        assertIsRect(x, y, w, h)

        goalX = goalX or x
        goalY = goalY or y
        filter = filter or defaultFilter

        const collisions = []

        const visited = {}
        if item != nil { visited[item] = true }

        // This could probably be done with less cells using a polygon raster over the cells instead of a
        // bounding rect of the whole movement. Conditional to building a queryPolygon method
        const tl, tt = min(goalX, x), min(goalY, y)
        const tr, tb = max(goalX + w, x + w), max(goalY + h, y + h)
        const tw, th = tr - tl, tb - tt

        const cl, ct, cw, ch = grid_toCellRect(self.cellSize, tl, tt, tw, th)

        const itemsInCellRect = getItemsInCellRect(self, cl, ct, cw, ch)

        for const other, _ in itemsInCellRect
        {
            if other not in visited
            {
                visited[other] = true
        
                const responseName = filter(item, other)
                if responseName
                {
                    const ox, oy, ow, oh = self.getRect(other)
                    const col = rect_detectCollision(x, y, w, h, ox, oy, ow, oh, goalX, goalY)
        
                    if col
                    {
                        col['other'] = other
                        col['item'] = item
                        col['type'] = responseName
            
                        collisions.add(col)
                    }
                }
            }
        }

        collisions.sort(sortByTiAndDistance)

        return collisions
    }

    function countCells()
    {
        var count = 0
        for const _, row in self.rows
        {
            for const _, __ in row
            {
                count = count + 1
            }
        }
        return count
    }

    function hasItem(item)
    {
        return item in self.rects
    }

    function getItems()
    {
        var items = []
        for const item, _ in self.rects
        {
            items.add(item)
        }
        return items
    }

    function countItems()
    {
        return self.rects.count
    }

    function getRect(item)
    {
        if item not in self.rects
        {
            error('Item ' + tostring(item) + ' must be added to the world before getting its rect. Use world.add(item, x, y, w, h) to add it first.')
        }
        const rect = self.rects[item]
        return [rect['x'], rect['y'], rect['w'], rect['h']]
    }

    function toWorld(cx, cy)
    {
        return grid_toWorld(self.cellSize, cx, cy)
    }

    function toCell(x, y)
    {
        return grid_toCell(self.cellSize, x, y)
    }

    // Query methods

    function queryRect(x, y, w, h, filter=nil)
    {
        assertIsRect(x, y, w, h)
        
        const cl, ct, cw, ch = grid_toCellRect(self.cellSize, x,y,w,h)
        const itemsInCellRect = getItemsInCellRect(self, cl,ct,cw,ch)
        
        const items = []
        
        var rect
        for const item, _ in itemsInCellRect
        {
            rect = self.rects[item]
            if (not filter or filter(item, nil))
                and rect_isIntersecting(x, y, w, h, rect['x'], rect['y'], rect['w'], rect['h'])
            {
                items.add(item)
            }
        }
        
        return items
    }

    function queryPoint(x, y, filter)
    {
        const cx,cy = self.toCell(x, y)
        const itemsInCellRect = getItemsInCellRect(self, cx,cy,1,1)
    
        const items = []
    
        var rect
        for const item, _ in itemsInCellRect
        {
            rect = self.rects[item]
            if (not filter or filter(item))
                and rect_containsPoint(rect.x, rect.y, rect.w, rect.h, x, y)
            {
                items.add(item)
            }
        }
    
        return items
    }

    function querySegment(x1, y1, x2, y2, filter)
    {
        const itemInfo = getInfoAboutItemsTouchedBySegment(self, x1, y1, x2, y2, filter)
        return itemInfo
    }

    function querySegmentWithCoords(x1, y1, x2, y2, filter)
    {
        const itemInfo = getInfoAboutItemsTouchedBySegment(self, x1, y1, x2, y2, filter)
        const dx, dy = x2 - x1, y2 - y1
        var info, ti1, ti2
        for var i = 0; i < itemInfo.len; i += 1
        {
            info = itemInfo[i]
            ti1 = info.ti1
            ti2 = info.ti2

            info['weight'] = nil
            info['x1'] = x1 + dx * ti1
            info['y1'] = y1 + dy * ti1
            info['x2'] = x1 + dx * ti2
            info['y2'] = y1 + dy * ti2
        }
        return itemInfo
    }

    // Main methods

    function add(item, x, y, w, h)
    {
        if item in self.rects
        {
            error('Item ' + tostring(item) + ' added to the world twice.')
        }
        assertIsRect(x, y, w, h)

        self.rects[item] = {x = x, y = y, w = w, h = h}

        const cl, ct, cw, ch = grid_toCellRect(self.cellSize, x, y, w, h)
        for var cy = ct; cy < ct + ch; cy += 1
        {
            for var cx = cl; cx < cl + cw; cx += 1
            {
                addItemToCell(self, item, cx, cy)
            }
        }

        return item
    }

    function remove(item)
    {
        const x, y, w, h = self.getRect(item)

        self.rects.delete(item)
        var cl, ct, cw, ch = grid_toCellRect(self.cellSize, x, y, w, h)
        for var cy = ct; cy < ct + ch; cy += 1
        {
            for var cx = cl; cx < cl + cw; cx += 1
            {
                removeItemFromCell(self, item, cx, cy)
            }
        }
    }

    function update(item, x2, y2, w2=nil, h2=nil)
    {
        var x1, y1, w1, h1 = self.getRect(item)
        w2, h2 = w2 or w1, h2 or h1
        assertIsRect(x2, y2, w2, h2)

        if (x1 != x2) or (y1 != y2) or (w1 != w2) or (h1 != h2)
        {
            const cellSize = self.cellSize
            const cl1, ct1, cw1, ch1 = grid_toCellRect(cellSize, x1, y1, w1, h1)
            const cl2, ct2, cw2, ch2 = grid_toCellRect(cellSize, x2, y2, w2, h2)
        
            if (cl1 != cl2) or (ct1 != ct2) or (cw1 != cw2) or (ch1 != ch2)
            {
                const cr1 = cl1 + cw1 - 1
                const cb1 = ct1 + ch1 - 1
                const cr2 = cl2 + cw2 - 1
                const cb2 = ct2 + ch2 - 1
                var cyOut
            
                for var cy = ct1; cy <= cb1; cy += 1
                {
                    cyOut = (cy < ct2) or (cy > cb2)
                    for var cx = cl1; cx <= cr1; cx += 1
                    {
                        if cyOut or (cx < cl2) or (cx > cr2)
                        {
                            removeItemFromCell(self, item, cx, cy)
                        }
                    }
                }
            
                for var cy = ct2; cy <= cb2; cy += 1
                {
                    cyOut = (cy < ct1) or (cy > cb1)
                    for var cx = cl2; cx <= cr2; cx += 1
                    {
                        if cyOut or (cx < cl1) or (cx > cr1)
                        {
                            addItemToCell(self, item, cx, cy)
                        }
                    }
                }
            }
        
            const rect = self.rects[item]
            rect['x'] = x2
            rect['y'] = y2
            rect['w'] = w2
            rect['h'] = h2
        }
    }

    function move(item, goalX=nil, goalY=nil, filter=nil)
    {
        const x, y, cols = self.check(item, goalX, goalY, filter)
        self.update(item, x, y)
        return [x, y, cols]
    }

    function check(item, goalX=nil, goalY=nil, filter=nil)
    {
        filter = filter or defaultFilter

        const visited = {[item] = true}
        const visitedFilter = function(itm, other)
        {
            if other in visited { return false }
            return filter(itm, other)
        }

        var cols = []

        const x, y, w, h = self.getRect(item)

        var projected_cols = self.project(item, x, y, w, h, goalX, goalY, visitedFilter)
        
        while projected_cols.len > 0
        {
            const col = projected_cols[0]
            cols.add(col)

            visited[col['other']] = true

            var response = getResponseByName(self, col['type'])
            goalX, goalY, projected_cols = response(
                self,
                col,
                x, y, w, h,
                goalX, goalY,
                visitedFilter
            )
        }

        return [goalX, goalY, cols]
    }
}

// Public library functions

export function newWorld(cellSize=64)
{
    const world = World.new(cellSize)
    world.addResponse('touch', touch)
    world.addResponse('cross', cross)
    world.addResponse('slide', slide)
    world.addResponse('bounce', bounce)
    return world
}